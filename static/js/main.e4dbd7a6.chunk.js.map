{"version":3,"sources":["Components/SearchBar.js","api/unsplash.js","Components/ImageCard.js","Components/Images.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","results","onSearchSubmit","event","preventDefault","_this","props","onSubmit","_this2","this","react_default","a","createElement","className","style","color","type","placeholder","value","onChange","e","setState","target","React","Component","axios","create","baseURL","headers","Authorization","ImageCard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","createRef","addEventListener","_this$props$image","image","description","urls","gridRowEnd","concat","ref","alt","src","small","Images","images","map","Components_ImageCard","key","id","App","load","onFormSubmit","_callee","term","response","regenerator_default","wrap","_context","prev","next","unsplash","get","params","query","sent","data","stop","Components_SearchBar","Components_Images","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4dbd7a6.chunk.js","sourcesContent":["import React from 'react';\nimport '../SearchBar.css';\n\nclass SearchBar extends React.Component {\n  state = { results: '' };\n\n  onSearchSubmit = event => {\n    event.preventDefault();\n\n    this.props.onSubmit(this.state.results);\n  };\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark mb-3\">\n        <span className=\"navbar-brand mb-0 h1 ml-4 \">\n          Image Gallery\n          <i\n            className=\"imageIcon fas fa-images fa-1x ml-2\"\n            style={{ color: 'white' }}\n          />\n        </span>\n        <form onSubmit={this.onSearchSubmit} className=\"form-inline\">\n          <input\n            className=\"form-control mr-sm-2 \"\n            type=\"text\"\n            placeholder=\"Search\"\n            value={this.state.results}\n            onChange={e => this.setState({ results: e.target.value })}\n          />\n          <button className=\"btn btn-primary my-2 my-sm-0\" type=\"submit\">\n            Search\n          </button>\n        </form>\n      </nav>\n    );\n  }\n}\n\nexport default SearchBar;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://api.unsplash.com',\n  headers: {\n    Authorization:\n      'Client-ID 423e31fbf6fba9cd8a1bc0823ba6c1597cc8f0703eaea02175af70622628a4eb'\n  }\n});\n","import React from 'react';\n\nclass ImageCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { spans: 0 };\n\n    this.imageRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.imageRef.current.addEventListener('load', this.setSpans);\n  }\n  setSpans = () => {\n    const height = this.imageRef.current.clientHeight;\n\n    const spans = Math.ceil(height / 10);\n\n    this.setState({ spans });\n  };\n\n  render() {\n    const { description, urls } = this.props.image;\n    return (\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\n        <img ref={this.imageRef} alt={description} src={urls.small} />\n      </div>\n    );\n  }\n}\n\nexport default ImageCard;\n","import './images.css';\nimport React from 'react';\nimport ImageCard from './ImageCard';\n\nconst Images = props => {\n  const images = props.images.map(image => {\n    return <ImageCard key={image.id} image={image} />;\n  });\n\n  return <div className=\"images\">{images}</div>;\n};\n\nexport default Images;\n","import React from 'react';\nimport SearchBar from './Components/SearchBar';\nimport unsplash from './api/unsplash';\nimport Images from './Components/Images';\n\nclass App extends React.Component {\n  state = { images: [], load: false };\n\n  onFormSubmit = async term => {\n    const response = await unsplash.get('/search/photos', {\n      params: { query: term }\n    });\n    this.setState({ images: response.data.results, load: true });\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchBar onSubmit={this.onFormSubmit} />\n        <Images images={this.state.images} />\n        {this.state.load === false ? (\n          <div className=\"jumbotron\">\n            <h1 className=\"display-4 text-center\">Search Away!!</h1>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}